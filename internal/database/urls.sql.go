// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: urls.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getURLByID = `-- name: GetURLByID :one
SELECT id, url, frequency, last_scraped_at, next_scrape_at, status, retry_count, max_retries, parser_config, user_agent, timeout, rate_limit, created_at, updated_at, deleted_at FROM urls WHERE id = $1
`

func (q *Queries) GetURLByID(ctx context.Context, id uuid.UUID) (Url, error) {
	row := q.db.QueryRowContext(ctx, getURLByID, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Frequency,
		&i.LastScrapedAt,
		&i.NextScrapeAt,
		&i.Status,
		&i.RetryCount,
		&i.MaxRetries,
		&i.ParserConfig,
		&i.UserAgent,
		&i.Timeout,
		&i.RateLimit,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listURLs = `-- name: ListURLs :many
SELECT id, url, frequency, last_scraped_at, next_scrape_at, status, retry_count, max_retries, parser_config, user_agent, timeout, rate_limit, created_at, updated_at, deleted_at FROM urls ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListURLsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListURLs(ctx context.Context, arg ListURLsParams) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, listURLs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Frequency,
			&i.LastScrapedAt,
			&i.NextScrapeAt,
			&i.Status,
			&i.RetryCount,
			&i.MaxRetries,
			&i.ParserConfig,
			&i.UserAgent,
			&i.Timeout,
			&i.RateLimit,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
