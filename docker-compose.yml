version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: scraping_postgres
    environment:
      POSTGRES_DB: scraping_db
      POSTGRES_USER: scraping_user
      POSTGRES_PASSWORD: scraping_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - scraping_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scraping_user -d scraping_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: scraping_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - scraping_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: scraping_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - scraping_network

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: cmd/api-gateway/Dockerfile
    container_name: scraping_api_gateway
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=scraping_db
      - DB_USER=scraping_user
      - DB_PASSWORD=scraping_password
      - KAFKA_BROKERS=kafka:29092
      - LOG_LEVEL=info
      - SERVER_PORT=8080
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - scraping_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # URL Manager Service
  url-manager:
    build:
      context: .
      dockerfile: cmd/url-manager/Dockerfile
    container_name: scraping_url_manager
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=scraping_db
      - DB_USER=scraping_user
      - DB_PASSWORD=scraping_password
      - KAFKA_BROKERS=kafka:29092
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - scraping_network

  # Scraper Service
  scraper:
    build:
      context: .
      dockerfile: cmd/scraper/Dockerfile
    container_name: scraping_scraper
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=scraping_db
      - DB_USER=scraping_user
      - DB_PASSWORD=scraping_password
      - KAFKA_BROKERS=kafka:29092
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - scraping_network

  # Parser Service
  parser:
    build:
      context: .
      dockerfile: cmd/parser/Dockerfile
    container_name: scraping_parser
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=scraping_db
      - DB_USER=scraping_user
      - DB_PASSWORD=scraping_password
      - KAFKA_BROKERS=kafka:29092
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - scraping_network

  # Data Storage Service
  data-storage:
    build:
      context: .
      dockerfile: cmd/data-storage/Dockerfile
    container_name: scraping_data_storage
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=scraping_db
      - DB_USER=scraping_user
      - DB_PASSWORD=scraping_password
      - KAFKA_BROKERS=kafka:29092
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - scraping_network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: scraping_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - scraping_network

  grafana:
    image: grafana/grafana:latest
    container_name: scraping_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - scraping_network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: scraping_jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - scraping_network

volumes:
  postgres_data:
  grafana_data:

networks:
  scraping_network:
    driver: bridge 